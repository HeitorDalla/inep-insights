# Importar bibliotecas
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

# Importando P√°ginas de visualiza√ß√£o
from frontend.views.analise_especifica_past.saneamento_basico import saneamento_basico
from frontend.views.analise_especifica_past.corpo_docente import corpo_docente
from frontend.views.analise_especifica_past.infraestrutura import infraestrutura
from frontend.views.analise_especifica_past.material import material
from frontend.views.analise_especifica_past.matricula import matricula

# Fun√ß√£o para mostrar a p√°gina de an√°lise espec√≠fica
def show_analise_especifica_page(conn):
    # SQL Query para ler as regi√µes √∫nicas do banco de dados
    regiao_df = pd.read_sql("""
        SELECT DISTINCT NO_REGIAO 
        FROM regiao 
        ORDER BY NO_REGIAO ASC
        """, conn)
    
    # Selectbox na sidebar para o usu√°rio selecionar a regi√£o
    regiao_selecionada = st.sidebar.selectbox(
        "Selecione a regi√£o:",
        options=regiao_df["NO_REGIAO"]
    )

    # SQL Query para ler as UFs √∫nicas baseadas na regi√£o selecionada
    uf_df = pd.read_sql(
        """
        SELECT DISTINCT uf.NO_UF
        FROM uf
        JOIN regiao ON uf.regiao_id = regiao.id
        WHERE regiao.NO_REGIAO = %s
        ORDER BY uf.NO_UF ASC
        """, conn, params=(regiao_selecionada,)
    )

    # Selectbox na sidebar para o usu√°rio selecionar a UF
    uf_selecionada = st.sidebar.selectbox(
        "Selecione a UF:",
        options=uf_df["NO_UF"]
    )

    # SQL Query para ler os munic√≠pios √∫nicos baseados na UF selecionada
    municipio_df = pd.read_sql(
        """
        SELECT DISTINCT municipio.NO_MUNICIPIO
        FROM municipio
        JOIN uf ON municipio.uf_id = uf.id
        WHERE uf.NO_UF = %s
        ORDER BY municipio.NO_MUNICIPIO ASC
        """, conn, params=(uf_selecionada,)
    )

    # Selectbox na sidebar para o usu√°rio selecionar o munic√≠pio
    municipio_selecionado = st.sidebar.selectbox(
        "Selecione o munic√≠pio:",
        options=municipio_df["NO_MUNICIPIO"]
    )

    # SQL Query para buscar os tipos de localiza√ß√£o dispon√≠veis (Urbana e Rural)
    tipo_localizacao_df = pd.read_sql("""
        SELECT id, descricao 
        FROM tipo_localizacao 
        ORDER BY descricao ASC
    """, conn)

    # Converte as op√ß√µes de localiza√ß√£o em uma lista
    tipo_localizacao_list = tipo_localizacao_df["descricao"].tolist()
    
    # Multiselect na sidebar para o usu√°rio escolher os tipos de localiza√ß√£o
    # Por padr√£o, todas as op√ß√µes est√£o selecionadas
    tipo_localizacao_selecionada = st.sidebar.multiselect(
        "Selecione o(s) tipo(s) de localiza√ß√£o:",
        options=tipo_localizacao_list,
        default=tipo_localizacao_list
    )

    # SQL Query para buscar escolas baseadas em todos os filtros aplicados
    # Verifica se o usu√°rio escolheu pelo menos um tipo de localiza√ß√£o
    if tipo_localizacao_selecionada:
        # Cria placeholders din√¢micos para a query SQL baseado no n√∫mero de tipos selecionados
        # Exemplo: se 2 tipos selecionados, cria "%s, %s"
        placeholders = ", ".join(["%s"] * len(tipo_localizacao_selecionada))

        # Monta a query SQL com placeholders din√¢micos
        sql = f"""
            SELECT
                e.id               AS escola_id,
                e.NO_ENTIDADE      AS escola_nome,
                tl.descricao       AS localizacao
            FROM escola e
            JOIN municipio m           ON e.municipio_id       = m.id
            JOIN uf u                  ON m.uf_id              = u.id
            JOIN regiao r              ON u.regiao_id          = r.id
            JOIN tipo_localizacao tl   ON e.tp_localizacao_id  = tl.id
            WHERE r.NO_REGIAO    = %s
            AND u.NO_UF         = %s
            AND m.NO_MUNICIPIO  = %s
            AND tl.descricao    IN ({placeholders})
            ORDER BY e.NO_ENTIDADE ASC
        """
        
        # Constr√≥i a lista de par√¢metros para a query
        # Come√ßa com os filtros fixos (regi√£o, UF, munic√≠pio) e adiciona os tipos de localiza√ß√£o
        params = [regiao_selecionada, uf_selecionada, municipio_selecionado] + tipo_localizacao_selecionada
        
        # Executa a query e obt√©m o DataFrame com as escolas filtradas
        df_escolas = pd.read_sql(sql, conn, params=params)
    else:
        # Se nenhum tipo de localiza√ß√£o foi selecionado, cria DataFrame vazio
        df_escolas = pd.DataFrame(columns=["escola_id", "escola_nome", "localizacao"])

    # # Verifica se encontrou escolas com os filtros aplicados
    # if not df_escolas.empty:
    #     # Exibe informa√ß√£o sobre quantas escolas foram encontradas
    #     st.sidebar.write(f"**{len(df_escolas)} escolas encontradas**")
        
    #     # Mostra a distribui√ß√£o por tipo de localiza√ß√£o
    #     distribuicao = df_escolas['localizacao'].value_counts()
    #     for tipo, qtd in distribuicao.items():
    #         st.sidebar.write(f"‚Ä¢ {tipo}: {qtd} escolas")
    # else:
    #     # Se n√£o encontrou escolas, exibe mensagem de alerta
    #     st.sidebar.write("**Nenhuma escola encontrada** com os filtros selecionados! Por favor, selecione ao menos um tipo de localiza√ß√£o.")

    # Aplica estilo CSS √†s abas de navega√ß√£o
    st.markdown("""
        <style>
            div[role="tablist"] {
                display: flex !important;
                justify-content: space-around !important; 
            }
        </style>
    """,
    unsafe_allow_html=True)

    # Configura√ß√£o do menu de navega√ß√£o com abas internas
    tab_saneamento_basico, tab_infraestrutura, tab_material, tab_corpo_docente, tab_matricula = st.tabs([
        "üí¶ Saneamento B√°sico",
        "üè´ Infraestrutura", 
        "üìí Material",
        "üë©üèª Corpo Docente",
        "üßëüèª‚Äçüéì Matr√≠cula"
    ])

    # Nome da escola da persona Marta (escola de refer√™ncia para compara√ß√£o)
    nome_escola_marta = "TRABALHO E SABER ESCOLA MUNICIPAL DO CAMPO"

    # Conte√∫do da aba "Saneamento B√°sico"
    with tab_saneamento_basico:
        # Passa a conex√£o, nome da escola de Marta e o DataFrame com escolas filtradas
        saneamento_basico(conn, nome_escola_marta, df_escolas)

    # Conte√∫do da aba "Infraestrutura"
    with tab_infraestrutura:
        # Passa a conex√£o, nome da escola de Marta e o DataFrame com escolas filtradas
        infraestrutura(conn, nome_escola_marta, df_escolas)

    # Conte√∫do da aba "Material"
    with tab_material:
        # Mant√©m a implementa√ß√£o original (n√£o alterada nesta vers√£o)
        material(conn, nome_escola_marta, df_escolas)

    # Conte√∫do da aba "Corpo Docente"
    with tab_corpo_docente:
        # Mant√©m a implementa√ß√£o original (n√£o alterada nesta vers√£o)
        corpo_docente(conn, nome_escola_marta, df_escolas)

    # Conte√∫do da aba "Matr√≠cula"
    with tab_matricula:
        # Mant√©m a implementa√ß√£o original (n√£o alterada nesta vers√£o)
        matricula(conn, nome_escola_marta)